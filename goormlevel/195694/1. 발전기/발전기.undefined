# -*- coding: utf-8 -*-
# UTF-8 encoding when using korean
# 813
from collections import deque

N = int(input())
board = [list(map(int, input().split())) for _ in range(N)]

def bfs(row, col):
	dq = deque()
	dq.append((row, col))
	board[row][col] = 2
	
	while dq:
		r, c = dq.popleft()
		for nr, nc in [(r + 1, c), (r, c + 1), (r - 1, c), (r, c - 1)]:
			if 0 <= nr < N and 0 <= nc < N and board[nr][nc] == 1:
				board[nr][nc] = 2
				dq.append((nr, nc))

answer = 0
for r in range(N):
	for c in range(N):
		if board[r][c] == 1:
			bfs(r, c)
			answer += 1
			
print(answer)